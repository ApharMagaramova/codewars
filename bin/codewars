#!/usr/bin/env node

var fs = require("fs"),
    argv = require('minimist')(
      process.argv.slice(2), { alias: { h: 'help', t: 'token', l: 'language' } }
    ),
    codewars = require("../"),
    command  = argv._[0],
    log = function() { return console.log.apply(console, arguments); };

argv.language = (argv.language || "javascript").toLowerCase();

function responseError(response){
  var status = response.statusCode,
      body   = response.raw.toString('utf-8');

  log('Oh noes! Something is wrong.\n');
  log('Status: ' + status);
  log('Body:  ' + body);
  process.exit(1);
}

function help(){
  fs.createReadStream(__dirname + '/usage.txt').pipe(process.stdout);
}

function setup(){
  if (!argv.token) {
    log("setup failed, missing required argument: token")
    log("read your token here: https://www.codewars.com/users/edit")
    process.exit(1);
  }
  if (!/javascript|ruby/.test(argv.language)){
    log("setup failed, unsupported language: " + argv.language);
  }
  codewars().setup({
    language: argv.language,
    token: argv.token
  });
}

function test(){
  codewars().test().then(function(){
    log('Success - ready to rumble!');
    process.exit(0);
  }, responseError);
}

function train(){
  codewars().fetch().then(function(data){
    var challenge = require('../challenge')(data.raw.toString('utf-8')),
        msee      = require("msee"),
        prompt    = require("prompt");
     
    log(msee.parse(challenge.toString()));

    prompt.start();
    prompt.message = '';
    prompt.delimiter = '';

    prompt.get([{

      name: 'answer',
      message: 'Take this challenge? [y/N]'.magenta

    }], function (err, result) {
      if (err) process.exit(1);

      var answer = result.answer;

      if (!result.answer) answer = 'n';
      answer = answer.trim().toLowerCase();

      if (/^n/.test(answer)) train();
      if (/^y/.test(answer)) {
        codewars().train(challenge).then(function(data){
          var challenge = require('../challenge')(data.raw.toString('utf-8'));
          codewars().save(challenge);
        }, responseError);
      }
    });
  });
}

if (argv.help) help();

switch (command){
  case 'setup':
    setup();
    break;

  case 'test':
    test();
    break;

  case 'train':
    train();
    break;

  default:
    help();
}
