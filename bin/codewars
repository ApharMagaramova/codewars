#!/usr/bin/env node

var fs = require("fs"),
    argv = require('minimist')(
      process.argv.slice(2), { alias: { h: 'help', t: 'token', l: 'language', s: 'strategy' } }
    ),
    codewars = require("../"),
    command  = argv._[0],
    log = function() { return console.log.apply(console, arguments); };

argv.language = (argv.language || "javascript").toLowerCase();

var client = codewars();

function responseError(response){
  var status = response.statusCode,
      body   = response.raw.toString('utf-8');

  log('Oh noes! Something is wrong.\n');
  log('Status: ' + status);
  log('Body:  ' + body);
  process.exit(1);
}

function help(){
  fs.createReadStream(__dirname + '/usage.txt').pipe(process.stdout);
}

function setup(){
  if (!argv.token) {
    log("setup failed, missing required argument: token")
    log("read your token here: https://www.codewars.com/users/edit")
    process.exit(1);
  }
  if (!/javascript|ruby/.test(argv.language)){
    log("setup failed, unsupported language: " + argv.language);
  }
  client.setup({
    language: argv.language,
    token: argv.token,
    strategy: argv.strategy
  });
}

function test(){
  client.test().then(function(){
    log('Success - ready to rumble!');
    process.exit(0);
  }, responseError);
}

function train(){
  client.fetch().then(function(data){
    if (!data) return; 

    var challenge = require('../challenge')(data.raw.toString('utf-8')),
        msee      = require("msee"),
        prompt    = require("prompt");
     
    log(msee.parse(challenge.toString()));

    prompt.start();
    prompt.message = '';
    prompt.delimiter = '';

    prompt.get([{

      name: 'answer',
      message: 'Take this challenge? [y/N]'.magenta

    }], function (err, result) {
      if (err) process.exit(1);

      var answer = result.answer;

      if (!result.answer) answer = 'n';
      answer = answer.trim().toLowerCase();

      if (/^n/.test(answer)) train();
      if (/^y/.test(answer)) {
        client.train(challenge).
          then(client.save(), responseError).then(function(){

          log(msee.parse(challenge.acceptedMessage()));
        });
      }
    });
  });
}

function attempt(){
  client.attempt().then(function(response){
    var body = JSON.parse(response.raw.toString('utf-8'));
    if (body.success){
      var poll = function(){
        client.poll(body.dmid).then(function(response){
          var body = JSON.parse(response.raw.toString('utf-8'));
          if (body.value == 'running') setTimeout(poll, 1000);
          else log(body)
        });
      }
      poll()
    } else {
      log('Error: ' + body.reason);
    }
  }, responseError);
}

function finalize(){
  client.finalize().then(function(response){
    var body = JSON.parse(response.raw.toString('utf-8'));
    if (body.success){
      log('Kata completed, congratulations!')
      log('See more solutions here: http://www.codewars.com/kata/' +
          client.challenge.slug +
          '/solutions/' + client.challenge.language)
      client.done();
    }
  }, responseError);
}

function print(){
  client.getCurrentChallenge().
    then(function(challenge){
      var msee      = require("msee");
      log(msee.parse(challenge.toString()));
    })
}

if (argv.help) help();

switch (command){
  case 'setup':
    setup();
    break;

  case 'test':
    test();
    break;

  case 'train':
    train();
    break;

  case 'attempt':
    attempt();
    break;

  case 'finalize':
    finalize();
    break;

  case 'print':
    print();
    break;

  default:
    help();
}
