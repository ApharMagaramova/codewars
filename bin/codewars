#!/usr/bin/env node

var fs = require("fs"),
    argv = require('minimist')(
        process.argv.slice(2),
        {
            alias: { h: 'help', t: 'token', l: 'language', s: 'strategy' }
        }
    ),
    codewars = require("../"),
    client = codewars(),
    HTTPError = require("../http_error"),
    command  = argv._[0],
    log = function() { return console.log.apply(console, arguments); },
    msee = require('msee'),
    colors = require('colors');

argv.language = (argv.language || "javascript").toLowerCase();

// TODO: extract logger, probably
function responseError(response){
  var status = response.statusCode,
      body   = response.raw.toString('utf-8');

  log('HTTP error'.red);
  log('Status: ' + status);
  log('Body:  ' + body);
  process.exit(1);
}

function logTestData(data){
  log(msee.parse("## Tests"));

  var buff = data.summary.passed.toString().green + " passed".green + ', ' +
    data.summary.failed.toString().red + " failed".red + ', ' +
    data.summary.errors.toString().red + " errors".red + " in " +
    data.wall_time.toString().yellow + 'ms'.yellow;

  log(buff);
}

function logAttempt(data){
  if (data.valid){
    log("Well done! Solution is correct. :)".green)
  } else {
    log("Nope. Your solution is incorrect. :(".red)
    log(msee.parse('## Stack trace\n' + data.reason));
  }

  logTestData(data);

  if (data.valid) {
    log('\n')
    log(msee.parse("You can still make some final changes, before submitting with:\n" +
        "```\ncodewars submit```"))
  } else {
    log('')
  }
}

function help(){
  fs.createReadStream(__dirname + '/usage.txt').pipe(process.stdout);
}

function setup(){
  if (!argv.token) {
    log("Setup failed, missing required argument: --token".red);
    log("Read your API access token here: https://www.codewars.com/users/edit".yellow);
    log("\nUsage:");
    log("codewars setup --token <token>\n");
    process.exit(1);
  }
  if (!/javascript|ruby/.test(argv.language)){
    log("Setup failed, unsupported language: ".red + argv.language.toString().red);
    process.exit(1);
  }
  client.setup({
    language: argv.language,
    token: argv.token,
    strategy: argv.strategy
  }).then(function(){
    log("All done. Settings saved in ~/.config/codewars/settings.json".green);
  });
}

function test(){
  client.test().then(function(){
    log('Success - ready to rumble!');
    process.exit(0);
  }, responseError);
}

function train(id){
  client.fetch(id).then(function(data){
    if (!data) return;

    var challenge = require('../challenge')(data.raw.toString('utf-8')),
        prompt    = require("prompt");

    log(msee.parse(challenge.toString()));

    prompt.start();
    prompt.message = '';
    prompt.delimiter = '';

    prompt.get([{

      name: 'answer',
      message: 'Take this challenge? [y/N]'.magenta

    }], function (err, result) {
      if (err) process.exit(1);

      var answer = result.answer;

      if (!result.answer) answer = 'n';
      answer = answer.trim().toLowerCase();

      if (/^n/.test(answer)) train();
      if (/^y/.test(answer)) {
        client.train(challenge).
          then(function(data){
            var challenge = require('../challenge')(data.raw.toString('utf-8'))
            client.save(challenge)
          }, responseError).then(function(){

          log(msee.parse(challenge.acceptedMessage()));
        });
      }
    });
  }).fail(responseError);
}

function verify(){
  var path = argv._[1];
  if (!path) throw "Path to solution not provided." +
      " Run with: codewars verify /path/to/solution"

  client.getSolution(path).
    then(client.attempt.bind(client)).
    then(function(response){
      var body = JSON.parse(response.raw.toString('utf-8'));
      if (body.success){
        var poll = function(){
          client.poll(body.dmid).then(function(response){
            var body = JSON.parse(response.raw.toString('utf-8'));
            if (!body.success) setTimeout(poll, 1000);
            else logAttempt(body)
          });
        }
        poll()
      } else {
        log('Error: ' + body.reason);
      }
  }).
  fail(function(err){
    if (err instanceof HTTPError) {
      responseError(err.response)
    } else {
      console.log(err.message.red)
    }
  })
}

function submit(){
  client.finalize().then(function(response){
    var body = JSON.parse(response.raw.toString('utf-8'));

    if (body.success){
      log(msee.parse('## Kata completed'))
      log('See more solutions here: http://www.codewars.com/kata/' +
          client.challenge.slug +
          '/solutions/' + client.challenge.language)
      client.done();
    }
  }, responseError);
}

function print(){
  client.getCurrentChallenge().
    then(function(challenge){
      log(msee.parse(challenge.toString()))
      log(msee.parse("-----"))
      log(msee.parse(challenge.instructions()))
    }).fail(function(err){
      console.log(err.message.red)
    })
}

if (argv.help) help();

switch (command){
  case 'setup':
    setup();
    break;

  case 'test':
    test();
    break;

  case 'train':
    train(argv._[1]);
    break;

  case 'verify':
    verify();
    break;

  case 'submit':
    submit();
    break;

  case 'print':
    print();
    break;

  default:
    if (!argv.help) {
      help();
    }
}
